//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scenes/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionTest: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionTest()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""Head"",
            ""id"": ""bb1ab296-2147-4e83-ab5f-4c3c881b3672"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""32ea9395-cd1c-4ad3-806e-87a650dbdeb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""9367c92e-b3d3-4a8a-8306-e13cf119a348"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveMent"",
                    ""type"": ""PassThrough"",
                    ""id"": ""014f1c4d-a986-46bc-9522-765ae4f5d691"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d5c6f5a-f8b4-463a-84b9-a88377a3117c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beb04da8-b6d7-4e9c-9d26-766fb2f3da63"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5aa625d3-a30a-40b5-9ab0-0e2df5ee2cce"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""35e94c8a-5190-48a6-8d8f-94acf3dc60c0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMent"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""269f4ccb-7dc1-466b-9a26-0366b3757776"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""484c96ed-a410-42b8-b1c8-30af4d85c56f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b4345ead-f2bf-4d21-b3f8-392c6b1778cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""35ebf9e9-5197-4d98-91b8-23127befccc1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveMent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Head
        m_Head = asset.FindActionMap("Head", throwIfNotFound: true);
        m_Head_Jump = m_Head.FindAction("Jump", throwIfNotFound: true);
        m_Head_Position = m_Head.FindAction("Position", throwIfNotFound: true);
        m_Head_MoveMent = m_Head.FindAction("MoveMent", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Head
    private readonly InputActionMap m_Head;
    private List<IHeadActions> m_HeadActionsCallbackInterfaces = new List<IHeadActions>();
    private readonly InputAction m_Head_Jump;
    private readonly InputAction m_Head_Position;
    private readonly InputAction m_Head_MoveMent;
    public struct HeadActions
    {
        private @ActionTest m_Wrapper;
        public HeadActions(@ActionTest wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Head_Jump;
        public InputAction @Position => m_Wrapper.m_Head_Position;
        public InputAction @MoveMent => m_Wrapper.m_Head_MoveMent;
        public InputActionMap Get() { return m_Wrapper.m_Head; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeadActions set) { return set.Get(); }
        public void AddCallbacks(IHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_HeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeadActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @MoveMent.started += instance.OnMoveMent;
            @MoveMent.performed += instance.OnMoveMent;
            @MoveMent.canceled += instance.OnMoveMent;
        }

        private void UnregisterCallbacks(IHeadActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @MoveMent.started -= instance.OnMoveMent;
            @MoveMent.performed -= instance.OnMoveMent;
            @MoveMent.canceled -= instance.OnMoveMent;
        }

        public void RemoveCallbacks(IHeadActions instance)
        {
            if (m_Wrapper.m_HeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_HeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeadActions @Head => new HeadActions(this);
    public interface IHeadActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnMoveMent(InputAction.CallbackContext context);
    }
}
